Даны исходники сервиса-заглушки,
который использовался для первичной отладки интеграции с SET5.

По замыслу, кассовое ПО отправляет запросы сервису и ожидает ответов
(через тот же сокет, в том же порядке). Каждое сообщение - json-object,
тип сообщения содержится в параметре "req". Бизнес логику оставляем
за рамками задачи (тем более, что в сервисе-заглушке она ну очень урезанная).

stubCry.pl - сам сервис
EPW.pm - исторически обусловленная обёртка над IO::Epoll,
    в какой то степени аналог AnyEvent;
    позволяет навесить обработчики на готовность потока к чтению/записи (setFDH) и освободить внутренние структуры (clearFDH)
cps - "хранилище" данных о выданных системой купонах
msg - примеры входящих сообщений

"скормить" запрос сервису можно, например так *:
    perl stubCry.pl &
    (cat 638_1.msg;sleep 1; cat 638_2.msg; sleep 1; cat 638_3.msg ) | nc -q0 localhost 1212
    * после этого купон 02-759-740-479 оказывается погашен ;/

Задача:
1. найти и исправить "ошибку", которая не позволяет корректно передавать на вход сразу несколько сообщений, т.е. сделать, чтобы работало
    cat 638_1.msg 638_2.msg 638_3.msg |  nc -q0 localhost 1212
(без sleep)
2. реализовать LZW сжатие входа/выхода, т.е. сделать, чтобы работало
    gzip -nc 902.msg | nc -q0 localhost 1212 | gzip -dc

смысл задания - продемонстрировать базовое понимание событийной модели,
умение ориентироваться в чужом недокументированном коде и встраивать свой код,
без переписывания системы с нуля.

